## XBotInterface related configs

XBotInterface:
  urdf_path: "$(rospack find ModularBot_5DOF)/urdf/ModularBot.urdf"
  srdf_path: "$(rospack find ModularBot_5DOF)/srdf/ModularBot.srdf"
  joint_map_path: "$(rospack find ModularBot_5DOF)/joint_map/ModularBot_joint_map.yaml"

ModelInterface:
  model_type: "RBDL"
  is_model_floating_base: "false"

## XBot2 related configuration

# hal
xbotcore_device_configs:
    sim: $(rospack find ModularBot_5DOF)/config/hal/ModularBot_gz.yaml
    dummy: $(rospack find ModularBot_5DOF)/config/hal/ModularBot_dummy.yaml
    ec_imp: $(rospack find ModularBot_5DOF)/config/hal/ModularBot_ec_all.yaml
    
    # ec: $(rospack find ModularBot_5DOF)/config/hal/ModularBot_ec_all.yaml
    # ec_hybr: $(rospack find ModularBot_5DOF)/config/hal/ModularBot_ec_all.yaml
    ec_idle: $(rospack find ModularBot_5DOF)/config/hal/ModularBot_ec_all.yaml

# define threads to be created
xbotcore_threads:
  rt_main: { sched: fifo, prio: 60, period: 0.001, core_id: 2 }
  nrt_main: { sched: other, prio: 0, period: 0.005 }

# define plugins to be loaded
xbotcore_plugins:
  # this plugin is shipped with xbot2, and it generates the
  # ROS api for the framework
  # it is not designed to be real-time safe, so it must executed
  # inside a thread with `other` priority
  ros_io: { thread: nrt_main, type: ros_io }
  ros_ctrl: { thread: nrt_main, type: ros_control }

  # notice that you can reuse the same plugin, by providing
  # different names and possibly different parameters
  homing:
    thread: rt_main
    type: homing_example
    params:
      time: { value: 5, type: double }

# additional parameters that don't relate to any plugin
xbotcore_param:
  /jm/tx_filter_autostart: { value: true, type: bool } # autostart joint filter
  /jm/tx_filter_cutoff: { value: 2.0, type: double } # set default filter bandwidth
